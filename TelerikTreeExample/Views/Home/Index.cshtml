@{
    ViewData["Title"] = "Home";
}

<div class="text-center">
    <h1 class="display-4">Telerik TreeList</h1>
    <div style="margin-top:32px">
        @(
            Html.Kendo().TreeList<ItemViewModel>()
                .Name("treelist")
                .Toolbar(toolbar =>
                {
                    toolbar.Create().Text("Add root item");
                    toolbar.Spacer();
                    toolbar.Save();
                    toolbar.Separator();
                    toolbar.Cancel();
                })
                .Columns(columns =>
                {
                    columns.Add().Field(e => e.Name).Width(150);
                    columns.Add().Field(e => e.AggregateValue).Width(150)
                    .Template(
                        "<span title='Entered value: #= Value #' style='font-weight: #= AggregateValue > 1000 ? \"bold\" : \"normal\" #'>" +
                            "#= kendo.toString(AggregateValue, AggregateValue % 1 === 0 ? 'n0' : 'n2') #" +
                        "</span>");
                    columns.Add().Command(c =>
                    {
                        c.CreateChild().Text("Add child item");
                        c.Destroy();
                    }).Width(150);
            })
            .Events(ev => ev
                .DataBound("onDataBound")
                .Edit("onEdit")
                .Save("onSave"))
            .Editable(e => e.Mode(TreeListEditMode.InCell).Move(false))
            .Scrollable(false)
            .DataSource(dataSource => dataSource
                .Batch(true)
                //.AutoSync(true)
                .Read(read => read.Action("GetItems", "Home"))
                .Create(create => create.Action("CreateItems", "Home").Type(HttpVerbs.Post))
                .Update(update => update.Action("UpdateItems", "Home").Type(HttpVerbs.Post))
                .Destroy(delete => delete.Action("DestroyItems", "Home").Type(HttpVerbs.Post))
                .Model(m =>
                {
                    m.Expanded(true);
                    m.Id(f => f.Id);
                    m.ParentId(f => f.ParentId);
                    m.Field(f => f.Name);
                    m.Field(f => f.Value);
                    m.Field(f => f.AggregateValue);
                })
            )
        )
    </div>
</div>

<script>
    //The following code removes the 'Add child' button from the new records,
    //because they will receive an ID after saving the changes, which means that
    //no child records  could be added until that
    function onDataBound(e) {
        var items = e.sender.items();
        for (var i = 0; i < items.length; i++) {
            var row = $(items[i]);
            var dataItem = e.sender.dataItem(row);
            if (dataItem.isNew()) {
                row.find("[data-command='createchild']").hide();
            }
            else {
                row.find("[data-command='createchild']").show();
            }
        }
    }

    function onSave(e) {
        if (e.container[0].getAttribute('data-container-for') == 'AggregateValue') {
            var model = e.model;
            var newValue = e.values.Value;
            console.log(e.container[0]);
            console.log(model);
            console.log(newValue);
        }

        if (newValue !== undefined) {
            model.set("Value", newValue);
            model.set("AggregateValue", calculateCalculatedValue(model.Id));
        }

        function calculateCalculatedValue(id) {
            var data = $("#treelist").data("kendoTreeList").dataSource.view();
            var item = data.find(function(item) { return item.Id === id; });
            return item.Value; // Простая логика, нужно заменить на реальную логику
        }
    }

    function onEdit(e) {
        //console.log(e.container[0]);
        if (e.container[0].getAttribute('data-container-for') == 'AggregateValue') {
            e.container.html("<input name='Value' class='text-box single-line k-valid' data-bind='value:Value'/>");
            kendo.bind(e.container, e.model);
        }
    }
</script>
